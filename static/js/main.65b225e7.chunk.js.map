{"version":3,"sources":["Components/NavBar.js","Components/Input.js","Components/Encoder.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","role","aria-label","Component","Input","props","onTextChange","bind","e","this","target","value","method","text","onChange","placeholder","Encoder","state","original","result","options","encode","decode","onMethodChange","setState","axios","url","params","response","data","persist","then","r","originalText","resultText","map","key","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.65b225e7.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass NavBar extends Component {\n    render() {\n        return (\n            <nav className=\"navbar is-dark\" role=\"navigation\" aria-label=\"main navigation\">\n                <div className=\"navbar-brand\">\n                    <div className=\"navbar-item\">\n                        <h1>Encode/Decode</h1>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;","import React, {Component} from 'react';\n\nclass Input extends Component {\n    constructor(props) {\n        super(props);\n        this.onTextChange = this.onTextChange.bind(this);\n    }\n\n    onTextChange(e) {\n        this.props.onTextChange(e.target.value, this.props.method);\n    }\n\n    render() {\n        const text = this.props.text;\n        return (\n            <div className=\"field\">\n                <div className=\"control\">\n                        <textarea onChange={this.onTextChange}\n                                  value={text}\n                                  className=\"textarea is-primary\"\n                                  placeholder=\"Texto original\"/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Input;","import React, {Component} from 'react';\nimport axios from 'axios';\nimport '../App.css';\nimport Input from \"./Input\";\n\nclass Encoder extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            original: \"\",\n            result: \"\",\n            method: \"\",\n            options: [\"MD5\", \"SHA-1\", \"SHA-256\", \"SHA-512\", \"Malespin\"]\n        };\n        this.encode = this.encode.bind(this);\n        this.decode = this.decode.bind(this);\n        this.onMethodChange = this.onMethodChange.bind(this);\n    }\n\n    async encode(text, method) { //Encode\n        if (text === null || text === \"\") {\n            this.setState({\n                original: '',\n                result: ''\n            });\n            return;\n        }\n        let response = await axios({\n            method: 'get',\n            url: 'https://whispering-stream-25026.herokuapp.com/encode',\n            params: {\n                method: method,\n                text: text\n            }\n        });\n        this.setState({\n            original: text,\n            result: response.data.text\n        });\n    }\n\n    async decode(text, method) { //Decode\n        if (text === null || text === \"\") {\n            this.setState({\n                original: '',\n                result: ''\n            });\n            return;\n        }\n        let response = await axios({\n            method: 'get',\n            url: 'https://whispering-stream-25026.herokuapp.com/decode',\n            params: {\n                method: method,\n                text: text,\n            }\n        });\n        this.setState((state) => ({\n            result: text,\n            original: response.data.text\n        }))\n    }\n\n    onMethodChange(e) {\n        e.persist();\n        this.encode(this.state.original, e.target.value).then(r => {\n            this.setState({\n                method: e.target.value\n            });\n        });\n    }\n\n    componentDidMount() {\n        this.setState({\n            method: this.state.options[0] //Default Method\n        })\n    }\n\n    render() {\n        const originalText = this.state.original;\n        const resultText = this.state.result;\n        const method = this.state.method;\n        return (\n            <section className=\"inputs\">\n\n                <Input onTextChange={this.encode}\n                       text={originalText}\n                       method={method}/>\n\n                <div className=\"field is-grouped is-grouped-right\">\n                    <div className=\"control\">\n                        <div className=\"select\">\n                            <select onChange={this.onMethodChange}>\n                                {this.state.options.map(e => {\n                                    return <option key={e} value={e}>{e}</option>\n                                })}\n                            </select>\n                        </div>\n                    </div>\n                </div>\n\n                <Input onTextChange={this.decode}\n                       text={resultText}\n                       method={method}/>\n\n            </section>\n        );\n    }\n}\n\nexport default Encoder;","import React, {Component} from 'react';\nimport NavBar from \"./NavBar\";\nimport Encoder from \"./Encoder\";\n\nclass Main extends Component {\n    render() {\n        return (\n            <div>\n                <NavBar/>\n                <div className=\"container\">\n                    <Encoder/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport 'bulma/css/bulma.min.css'\nimport './App.css';\n\nimport Main from \"./Components/Main\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Main/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}